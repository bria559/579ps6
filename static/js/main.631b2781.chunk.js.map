{"version":3,"sources":["GetRhymes.js","GetSimilar.js","GroupBy.js","RhymeFunc.js","index.js"],"names":["GetRhymes","rel_rhy","callback","fetch","URLSearchParams","toString","then","response","json","data","err","console","error","GetSimilar","ml","GroupBy","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","push","result","Array","from","keys","sort","key","RhymeFunc","inputEl","useRef","useState","rhymes_list","setRhymes_list","description","setDescription","synonyms_list","setSynonyms_list","saved_word","setSavedWord","setResultsListed","saved_list","updateSaved","word","log","showSynonymDescription","rhymes","wordInput","current","value","results","length","synonyms","group_rhymes","group_synonyms","syllable_heading","groups","parseInt","word_list_el","onClick","synonym_word","synonyms_list_el","className","id","placeholder","ref","type","onKeyDown","event","ReactDOM","render","href","document","getElementById"],"mappings":"6JAUeA,MAVf,SAAmBC,EAASC,GACxBC,MAAM,kCAAD,OAAoC,IAAIC,gBAAgB,CAACH,YAAWI,aACpEC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACHP,EAASO,MACV,SAACC,GACAC,QAAQC,MAAMF,OCIXG,MAVf,SAAoBC,EAAIZ,GACpBC,MAAM,kCAAD,OAAoC,IAAIC,gBAAgB,CAACU,OAAMT,aAC/DC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACHP,EAASO,MACV,SAACC,GACAC,QAAQC,MAAMF,OCsBXK,MA5Bf,SAAiBC,EAASC,GAGtB,GAAwB,oBAAbA,EAAyB,CAClC,IAAMC,EAAWD,EACjBA,EAAW,SAACE,GAAD,OAASA,EAAID,IAG1B,IARgC,EAQ1BE,EAAiB,IAAIC,IARK,cASXL,GATW,IAShC,2BAA8B,CAAC,IAApBM,EAAmB,QACtBC,EAAYN,EAASK,GAEtBF,EAAeI,IAAID,IACtBH,EAAeK,IAAIF,EAAW,IAEhCH,EAAeM,IAAIH,GAAWI,KAAKL,IAfL,8BAmBhC,IAnBgC,EAmB1BM,EAAS,GAnBiB,cAoBdC,MAAMC,KACtBV,EAAeW,QACfC,QAtB8B,IAoBhC,2BAEU,CAAC,IAFAC,EAED,QACRL,EAAOK,GAAOb,EAAeM,IAAIO,IAvBH,8BAyBhC,OAAOL,G,OCiJIM,MApKf,WACI,IAAMC,EAAUC,iBAAO,MACvB,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA0CJ,mBAAS,IAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAAmCN,mBAAS,IAA5C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAA0CR,oBAAS,GAAnD,mBAAuBS,GAAvB,WAEIC,EAAa,GAEjB,SAASC,EAAYC,GAGnBF,EAAWpB,KAAKsB,GAEhBF,EAAW1C,WACXM,QAAQuC,IAAIH,GACZF,EAAaE,GAYf,SAASI,EAAuBF,GAC9BR,EAAe,6BAA+BQ,GAOhD,SAASG,IACP,IAAMC,EAAWlB,EAAQmB,QAAQC,MACjCvD,EAAUqD,GAAW,SAACG,GACG,IAAnBA,EAAQC,QAlBdhB,EAAe,yBAmBUY,GACrBP,GAAiB,GACjBP,EAAeiB,KAjBnBf,EAAe,cAqBXK,GAAiB,OAKvB,SAASY,IACP,IAAML,EAAWlB,EAAQmB,QAAQC,MACjCJ,EAAuBE,GACvBxC,EAAWwC,GAAW,SAACG,GACE,IAAnBA,EAAQC,QACVN,EAAuBE,GACvBP,GAAiB,GACjBH,EAAiBa,KAzBrBf,EAAe,cA6BXK,GAAiB,OAKvB,IAAIa,EAAe,GACfC,EAAiB,GACjBC,EAAkB,KAChBC,EAAS/C,EAAQuB,EAAa,gBAGpC,IAAK,IAAIL,KAAO6B,EAAO,CAGnBD,GAFF5B,EAAM8B,SAAS9B,IACL,EACW,+BAAKA,EAAL,gBAGA,+BAAKA,EAAL,eAGrB0B,EAAahC,KAAKkC,GATG,oBAWFC,EAAO7B,IAXL,yBAWVxB,EAXU,QAYbuD,EAAgB,+BACnBvD,EAAKwC,KAAM,IACZ,wBAAQgB,QAAS,kBAAMjB,EAAYvC,EAAKwC,OAAxC,oBAF6BxC,EAAKwC,MAIpCW,EAAiB,GACjBD,EAAahC,KAAKqC,IANpB,2BAAgC,IAXX,+BA1EP,oBA+FWtB,GA/FX,yBA+FLwB,EA/FK,QAiGNC,EACJ,+BACGD,EAAajB,KAAM,IACtB,wBAAQgB,QAAS,kBAAMjB,EAAYkB,EAAajB,OAAhD,oBAFWiB,EAAajB,MAK5BU,EAAe,GACfC,EAAejC,KAAKwC,IATtB,2BAA0C,IA/F1B,8BAmHpB,OACI,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACA,sBAAKA,UAAU,MAAf,0BAAkC,uBAAMC,GAAG,cAAT,cAAyBzB,QAGzD,qBAAKwB,UAAU,MAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,uBACEA,UAAU,eACVE,YAAY,eACZC,IAAKpC,EACLqC,KAAK,OACLC,UApBV,SAAmBC,GACA,UAAbA,EAAMzC,KACNmB,OAqBE,wBACEgB,UAAU,kBACVH,QAAS,WACPb,KAHJ,gCAQA,wBACEgB,UAAU,oBACVH,QAAS,WACPP,KAHJ,2BASA,qBAAKU,UAAU,aAAf,SACA,wBAAQC,GAAK,cAAcD,UAAU,MAArC,SAA2C,oBAAIA,UAAU,MAAd,SAAqB5B,aAIpE,uBAEE,6BAAKmB,IACL,6BAAKC,UC7Jfe,IAASC,OACL,mCACE,sBAAKR,UAAU,YAAf,UACE,8BACE,mBAAGS,KAAK,qCAAR,oBAIF,cAAC,EAAD,SAGJC,SAASC,eAAe,W","file":"static/js/main.631b2781.chunk.js","sourcesContent":["function GetRhymes(rel_rhy, callback) {\r\n    fetch(`https://api.datamuse.com/words?${(new URLSearchParams({rel_rhy})).toString()}`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            callback(data);\r\n        }, (err) => {\r\n            console.error(err);\r\n        });\r\n};\r\n\r\nexport default GetRhymes;","function GetSimilar(ml, callback) {\r\n    fetch(`https://api.datamuse.com/words?${(new URLSearchParams({ml})).toString()}`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            callback(data);\r\n        }, (err) => {\r\n            console.error(err);\r\n        });\r\n};\r\n\r\nexport default GetSimilar;","function GroupBy(objects, property) {\r\n    // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\r\n    // value for property (obj[property])\r\n    if (typeof property !== 'function') {\r\n      const propName = property;\r\n      property = (obj) => obj[propName];\r\n    }\r\n  \r\n    const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\r\n    for (const object of objects) {\r\n      const groupName = property(object);\r\n      //Make sure that the group exists\r\n      if (!groupedObjects.has(groupName)) {\r\n        groupedObjects.set(groupName, []);\r\n      }\r\n      groupedObjects.get(groupName).push(object);\r\n    }\r\n  \r\n    // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\r\n    const result = {};\r\n    for (const key of Array.from(\r\n      groupedObjects.keys()\r\n    ).sort()) {\r\n      result[key] = groupedObjects.get(key);\r\n    }\r\n    return result;\r\n  };\r\n\r\nexport default GroupBy;","import { useState, useRef } from 'react';\r\nimport GetRhymes from './GetRhymes';\r\nimport GetSimilar from './GetSimilar';\r\nimport GroupBy from './GroupBy';\r\n\r\n\r\nfunction RhymeFunc(){\r\n    const inputEl = useRef(null);\r\n    const [rhymes_list, setRhymes_list] = useState([]);\r\n    const [description, setDescription] = useState('');\r\n    const [synonyms_list, setSynonyms_list] = useState('');\r\n    const [saved_word, setSavedWord] = useState([]);\r\n    const [results_listed, setResultsListed]= useState(false);\r\n\r\n    let saved_list = [];\r\n    let string_saved = '';\r\n    function updateSaved(word){\r\n      // setSavedWord(word);\r\n      // saved_list.push(saved_word);\r\n      saved_list.push(word);\r\n      // console.log(saved_list);\r\n      saved_list.toString();\r\n      console.log(saved_list);\r\n      setSavedWord(saved_list);\r\n    };\r\n    \r\n    \r\n    function showRhymeDescription(word){\r\n      setDescription('Words that rhyme with ' + word)\r\n    };\r\n\r\n    function showRhymeDescriptionFalse(word){\r\n      setDescription('No results')\r\n    };\r\n\r\n    function showSynonymDescription(word){\r\n      setDescription('Words that are similar to ' + word)\r\n    };\r\n\r\n    function showSynonymDescriptionFalse(word){\r\n      setDescription('No results')\r\n    };\r\n\r\n    function rhymes(){\r\n      const wordInput =inputEl.current.value;\r\n      GetRhymes(wordInput, (results)=>{\r\n        if (results.length !== 0){\r\n          showRhymeDescription(wordInput);\r\n          setResultsListed(true);\r\n          setRhymes_list(results)\r\n        }\r\n        else{\r\n          showRhymeDescriptionFalse();\r\n          setResultsListed(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    function synonyms(){\r\n      const wordInput =inputEl.current.value;\r\n      showSynonymDescription(wordInput);\r\n      GetSimilar(wordInput, (results)=>{\r\n        if (results.length !== 0){\r\n          showSynonymDescription(wordInput);\r\n          setResultsListed(true);\r\n          setSynonyms_list(results)\r\n        }\r\n        else{\r\n          showSynonymDescriptionFalse();\r\n          setResultsListed(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    let group_rhymes = []\r\n    let group_synonyms = []\r\n    let syllable_heading= null;\r\n    const groups = GroupBy(rhymes_list, 'numSyllables');\r\n    \r\n\r\n    for (let key in groups){\r\n      key = parseInt(key)\r\n      if (key > 1){\r\n        syllable_heading = <h2>{key} Syllables</h2>;\r\n      }\r\n      else{\r\n        syllable_heading = <h2>{key} Syllable</h2>;\r\n      }\r\n\r\n      group_rhymes.push(syllable_heading);\r\n\r\n      for (const data of groups[key]){\r\n        const word_list_el = (<li key={data.word} >\r\n          {data.word}{' '}\r\n          <button onClick={() => updateSaved(data.word)}>Save</button>\r\n        </li>);\r\n        group_synonyms = [];\r\n        group_rhymes.push(word_list_el);\r\n      };\r\n    }\r\n\r\n    for (const synonym_word of synonyms_list){\r\n      // console.log(synonym_word.word);\r\n        const synonyms_list_el = (\r\n          <li key = {synonym_word.word}>\r\n            {synonym_word.word}{' '}\r\n          <button onClick={() => updateSaved(synonym_word.word)}>Save</button>\r\n          </li>\r\n        );\r\n      group_rhymes = [];\r\n      group_synonyms.push(synonyms_list_el);\r\n    }\r\n\r\n\r\n    function onKeydown(event){\r\n      if (event.key ==='Enter'){\r\n          rhymes();\r\n      }\r\n      }\r\n\r\n\r\nreturn (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n      <div className=\"col\">Saved words: <span id=\"saved_words\"> {saved_word}</span>\r\n      </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"input-group col\">\r\n            <input\r\n              className=\"form-control\"\r\n              placeholder=\"Enter a word\"\r\n              ref={inputEl}\r\n              type=\"text\"\r\n              onKeyDown = {onKeydown}\r\n            ></input>\r\n\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => {\r\n                rhymes();\r\n              }}\r\n            >\r\n              Show rhyming words\r\n            </button>\r\n            <button\r\n              className=\"btn btn-secondary\"\r\n              onClick={() => {\r\n                synonyms();\r\n              }}\r\n            >\r\n              Show synonyms\r\n            </button>\r\n\r\n            <div className=\"output row\">\r\n            <output id = \"word_output\" className=\"col\"><h2 className=\"col\">{description}</h2></output>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <br />\r\n        {/* <h2 className=\"col\">{description}</h2> */}\r\n          <ul>{group_rhymes}</ul>\r\n          <ul>{group_synonyms}</ul>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\n\r\nexport default RhymeFunc;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RhymeFunc from './RhymeFunc';\n\n\nReactDOM.render(\n    <>\n      <div className=\"container\">\n        <div>\n          <a href=\"https://bria559.github.com/579ps6/\">\n            Code\n          </a>\n        </div>\n        <RhymeFunc />\n      </div>\n    </>,\n    document.getElementById('root'));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// ReactDOM.render(<><h1>React To Do</h1></>, document.getElementById('root'));\n// ReactDOM.render(<><h1>Rhyme Finder</h1><rhymeFunc /></>, document.getElementById('root'));\n\n"],"sourceRoot":""}